library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity maq_semaforo is
	generic
	(

	);
	port
	(

		count_saida  	: out std_logic_vector(N downto 0)
	);
end entity;
architecture FRANCIN of maq_semaforo is
	type state is (rrr, ryr, grg, rry, rgr);
	signal pr_state, nx_state : state;
	signal sig_timer : integer range 0 to timer;
	signal count_out : integer range 0 to timer;
	--attribute ENUM_ENCODING : string; --optional attribute
	--attribute ENUM_ENCODING of state : type is "sequential";
begin
	------Lower section of FSM:------------
	--process (clk, rst, ena)
	process (clk, rst)
	variable count : integer range 0 to timer;
	begin
		if (rst = '1') then
			pr_state <= rrr;
			count := 0;
		elsif (rising_edge(clk) and ena = '1') then
		--elsif (rising_edge(clk)) then
			count := count + 1;
			if (count >= sig_timer) then
				pr_state <= nx_state;
				count := 0;
			end if;
		end if;
		count_out <= count;
		count_saida <= std_logic_vector(to_unsigned(count, N+1));
	end process;
	------Upper section of FSM:------------
	process (pr_state, ped, amb, guarda, count_out)
		begin
		
			--default (ped nao possui led amarelo)
			r1 <= '0';
			r2 <= '0';
			r3 <= '0';
			y2 <= '0';
			y3 <= '0';
			g1 <= '0';
			g2 <= '0';
			g3 <= '0';
			led_ped <= '0';
			
			--sig_timer <= 1;
			--1
			case pr_state is
				when rrr =>
					r1 <= '1';
					r2 <= '1';
					r3 <= '1';
					sig_timer <= t_inicio;
					nx_state <= ryr;
				--2
				when ryr =>
					r1 <= '1';
					y2 <= '1';
					r3 <= '1';
					sig_timer <= t_amarelo;
					nx_state <= grg;
				--3
				when grg =>
					g1 <= '1';
					r2 <= '1';
					g3 <= '1';
					led_ped <= '1';
					if (guarda = '0') then
						sig_timer <= 0;
						nx_state <= rry;
					elsif (amb = '0' and guarda = '1') then
						sig_timer <= 0;
						nx_state <= rry;
					else
						sig_timer <= t_ped;
						nx_state <= rry;
					end if;
					--sig_timer <= t_ped;
					--nx_state <= rry;
				--4
				when rry =>
					r1 <= '1';
					r2 <= '1';
					y3 <= '1';
					sig_timer <= t_amarelo;
					nx_state <= rgr;
				--5
				when rgr =>
					r1 <= '1';
					g2 <= '1';
					r3 <= '1';
					if (guarda = '0') then
						sig_timer <= 0;
						nx_state <= ryr;
					elsif (ped = '0' and count_out > t_min) then
						sig_timer <= 0;
						nx_state <= ryr;
					else
						sig_timer <= t_car;
						nx_state <= ryr;
					end if;
					--sig_timer <= t_car;
					--nx_state <= ryr;
			end case;
		end process;
end architecture;