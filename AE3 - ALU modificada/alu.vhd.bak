library ieee;
use ieee.std_logic_1164.all;

entity alu is
	generic (N : natural := 8); 
	port 
	(
		a, b   : in std_logic_vector(N-1 downto 0);
		cin    : in std_logic;
		opcode : in std_logic_vector(3 downto 0);
		y      : out std_logic_vector(N-1 downto 0)
	);
end entity;

architecture arch_alu of alu is
	signal a_uns, b_uns, y_arith : unsigned (N-1 downto 0);
	signal y_logic: std_logic_vector (N-1 downto 0);
begin
	a_uns   <= unsigned(a);
	b_uns   <= unsigned(b);
	cin_uns <= unsigned(cin);
	
--Select
	with opcode(3) select
	y <= y_logic when '0',
		  std_logic_vector (y_arith) when others; -- '1'
	
	--Parte Logica
	with opcode(2 downto 0) select
	y_logic <= (not a)    when "000",
				  (not b)    when "001",
				  (a and b)  when "010",
				  (a or b)   when "011",
				  (a nand b) when "100",
				  (a nor b)  when "101",
				  (a xor b)  when "110",
				  (a xnor b) when others; --111
				  
	--Parte Aritmetic
	with opcode(2 downto 0) select
	y_arith <= (a_uns)         when "000",
				  (b_uns)         when "001",
				  (a_uns + 1)     when "010",
				  (b_uns + 1)     when "011",
				  (a_uns - 1)     when "100",
				  (b_uns - 1)     when "101",
				  (a_uns + b_uns) when "110",
				  (a_uns + b_uns + cin_uns) when others; --111
	
end architecture;